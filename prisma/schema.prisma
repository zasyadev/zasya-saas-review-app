// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  email      String  @unique()
  password   String?
  first_name String?
  last_name  String?
  address    String? @db.LongText
  pin_code   String?
  mobile     String?

  status          Int
  role            Role             @relation(fields: [role_id], references: [id])
  role_id         Int
  organization    Organizations    @relation(fields: [organization_id], references: [id])
  organization_id Int
  createdDate     DateTime?        @default(now())
  Groups          Groups[]
  GroupsEmployees GroupsEmployees?
  FormTable       FormTable[]
  taskBy          FormAssign[]     @relation("taskBy")
  taskTo          FormAssign[]     @relation("taskTo")
  taskReviewBy    ReviewAssign[]   @relation("taskReviewBy")
  taskReviewTo    ReviewAssign[]   @relation("taskReviewTo")
  UserAnswers     UserAnswers[]
  TemplateTable   TemplateTable[]
  ReviewAnswers   ReviewAnswers[]
  TagsEmployees   TagsEmployees?
  UserImage       UserImage?
  PasswordReset   PasswordReset?
}

model Role {
  id            Int      @id @default(autoincrement())
  name          String
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())
  User          User[]
}

model Groups {
  id              Int               @id @default(autoincrement())
  name            String?
  category        String?
  status          Boolean
  user            User              @relation(fields: [user_id], references: [id])
  user_id         String
  created_date    DateTime          @default(now())
  modified_date   DateTime          @default(now())
  GroupsEmployees GroupsEmployees[]
}

model GroupsEmployees {
  id            Int      @id @default(autoincrement())
  group         Groups   @relation(fields: [group_id], references: [id])
  group_id      Int
  employee      User     @relation(fields: [employee_id], references: [id])
  employee_id   String   @unique
  is_manager    Boolean
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())
}

model FormTable {
  id               Int          @id @default(autoincrement())
  user             User         @relation(fields: [user_id], references: [id])
  user_id          String
  form_title       String?
  form_description String?
  form_data        Json?
  status           Boolean
  created_date     DateTime     @default(now())
  modified_date    DateTime     @default(now())
  FormAssign       FormAssign[]

  questions     FormQuestion[]  @relation("questions")
  UserAnswers   UserAnswers[]
  ReviewAssign  ReviewAssign[]
  ReviewAnswers ReviewAnswers[]
}

model FormAssign {
  id             Int       @id @default(autoincrement())
  assigned_by    User      @relation("taskBy", fields: [assigned_by_id], references: [id])
  assigned_by_id String
  assigned_to    User      @relation("taskTo", fields: [assigned_to_id], references: [id])
  assigned_to_id String
  form           FormTable @relation(fields: [form_id], references: [id])
  form_id        Int
  status         Boolean
  created_date   DateTime  @default(now())
  modified_date  DateTime  @default(now())
}

model FormQuestion {
  id            Int       @id @default(autoincrement())
  form          FormTable @relation("questions", fields: [form_id], references: [id], onDelete: Cascade)
  form_id       Int
  questionText  String
  type          String
  open          Boolean
  created_date  DateTime  @default(now())
  modified_date DateTime  @default(now())

  options     QuestionOption[] @relation("options")
  UserAnswers UserAnswers[]

  AttemptedAnswers AttemptedAnswers[]
}

model QuestionOption {
  id          Int          @id @default(autoincrement())
  question    FormQuestion @relation("options", fields: [question_id], references: [id], onDelete: Cascade)
  question_id Int
  optionText  String?
  lowerLabel  String?
  higherLabel String?

  created_date  DateTime @default(now())
  modified_date DateTime @default(now())

}

model UserAnswers {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [user_id], references: [id])
  user_id       String
  form          FormTable    @relation(fields: [form_id], references: [id], onDelete: Cascade)
  form_id       Int
  question      FormQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id   Int
  option        String?
  created_date  DateTime     @default(now())
  modified_date DateTime     @default(now())


}

model ReviewAssign {
  id             Int       @id @default(autoincrement())
  assigned_by    User      @relation("taskReviewBy", fields: [assigned_by_id], references: [id])
  assigned_by_id String
  assigned_to    User      @relation("taskReviewTo", fields: [assigned_to_id], references: [id])
  assigned_to_id String
  form           FormTable @relation(fields: [form_id], references: [id])
  form_id        Int
  status         String
  frequency      String
  review_type    String
  created_date   DateTime  @default(now())
  modified_date  DateTime  @default(now())

}

model ReviewAnswers {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [user_id], references: [id])
  user_id       String
  form          FormTable @relation(fields: [form_id], references: [id], onDelete: Cascade)
  form_id       Int
  created_date  DateTime  @default(now())
  modified_date DateTime  @default(now())
  deleted       Boolean?  @default(false)


  AttemptedAnswers AttemptedAnswers[]
}

model AttemptedAnswers {
  id            Int           @id @default(autoincrement())
  review        ReviewAnswers @relation(fields: [review_id], references: [id], onDelete: Cascade)
  review_id     Int
  question      FormQuestion  @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id   Int
  option        String?
  lowerLabel    String?
  higherLabel   String?
  created_date  DateTime      @default(now())
  modified_date DateTime      @default(now())
  deleted       Boolean?      @default(false)

}

model TemplateTable {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [user_id], references: [id])
  user_id          String
  form_title       String?
  form_description String?
  form_data        Json?
  status           Boolean
  created_date     DateTime @default(now())
  modified_date    DateTime @default(now())
}

model TagsEmployees {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String   @unique
  tags          Json?
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())
}

model Organizations {
  id            Int      @id @default(autoincrement())
  company_name  String   @unique
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())
  User          User[]
}

model UserImage {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String   @unique
  image         String?
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())

}

model PasswordReset {
  id            Int      @id @default(autoincrement())
  email         User     @relation(fields: [email_id], references: [email])
  email_id      String   @unique
  token         String?
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())
}
