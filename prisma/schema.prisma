// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(uuid())
  email                   String                    @unique() @db.VarChar(62)
  password                String?
  first_name              String?                   @db.VarChar(50)
  last_name               String?                   @db.VarChar(50)
  status                  Int
  role                    Role                      @relation(fields: [role_id], references: [id])
  role_id                 Int
  organization            UserOrganization          @relation(fields: [organization_id], references: [id])
  organization_id         Int
  createdDate             DateTime?                 @default(now())
  modified_date           DateTime?                 @default(now())
  deleted_date            DateTime?
  ReviewAssignTemplate    ReviewAssignTemplate[]
  taskReviewBy            Review[]                  @relation("taskReviewBy")
  ReviewTemplate          ReviewTemplate[]
  ReviewAssigneeAnswers   ReviewAssigneeAnswers[]
  userEmail               PasswordReset?            @relation("userEmail")
  createdBy               PasswordReset[]           @relation("createdBy")
  userCreated             UserApplaud[]             @relation("userCreated")
  userFeild               UserApplaud[]             @relation("userFeild")
  ReviewAssignee          ReviewAssignee[]
  UserOraganizationGroups UserOraganizationGroups[]

  UserOraganizationTags UserOraganizationTags[]
  UserDetails           UserDetails?
  UserNotification      UserNotification[]
  Survey                Survey[]
  Goals                 Goals[]
  GoalsTimeline         GoalsTimeline[]
  UserTeams             UserTeams[]
  GoalAssignee          GoalAssignee[]
  UserTeamsGroups       UserTeamsGroups[]
  Meetings              Meetings[]
  MeetingAssignee       MeetingAssignee[]

  @@map("users")
}

model Role {
  id                      Int                       @id @default(autoincrement())
  name                    RoleEnum                  @default(Member)
  created_date            DateTime                  @default(now())
  modified_date           DateTime                  @default(now())
  User                    User[]
  Review                  Review[]
  UserOraganizationGroups UserOraganizationGroups[]
  Survey                  Survey[]
  UserTeamsGroups         UserTeamsGroups[]

  @@map("users_role")
}

model ReviewAssignTemplate {
  id                    String                  @id @default(uuid())
  user                  User                    @relation(fields: [user_id], references: [id])
  user_id               String
  form_title            String?
  form_description      String?
  form_data             Json?
  status                Boolean
  created_date          DateTime                @default(now())
  modified_date         DateTime                @default(now())
  questions             ReviewQuestions[]       @relation("questions")
  Review                Review[]
  ReviewAssigneeAnswers ReviewAssigneeAnswers[]

  @@map("review_assign_template")
}

model ReviewQuestions {
  id                         Int                          @id @default(autoincrement())
  form                       ReviewAssignTemplate         @relation("questions", fields: [form_id], references: [id], onDelete: Cascade)
  form_id                    String
  questionText               String
  type                       String
  open                       Boolean
  created_date               DateTime                     @default(now())
  modified_date              DateTime                     @default(now())
  options                    ReviewQuestionOption[]       @relation("options")
  ReviewAssigneeAnswerOption ReviewAssigneeAnswerOption[]

  @@map("review_questions")
}

model ReviewQuestionOption {
  id            Int             @id @default(autoincrement())
  question      ReviewQuestions @relation("options", fields: [question_id], references: [id], onDelete: Cascade)
  question_id   Int
  optionText    String?
  lowerLabel    String?
  higherLabel   String?
  created_date  DateTime        @default(now())
  modified_date DateTime        @default(now())

  @@map("review_question_option")
}

model Review {
  id                    String                  @id @default(uuid())
  created               User                    @relation("taskReviewBy", fields: [created_by], references: [id])
  created_by            String
  review_name           String?
  form                  ReviewAssignTemplate?   @relation(fields: [form_id], references: [id], onDelete: Cascade)
  form_id               String?
  status                String?
  frequency             Frequency?
  review_type           ReviewType?             @default(other)
  organization          UserOrganization?       @relation(fields: [organization_id], references: [id])
  organization_id       Int?
  role                  Role?                   @relation(fields: [role_id], references: [id])
  role_id               Int?
  parent_id             String?
  frequency_status      Boolean                 @default(false)
  is_published          String?
  template_data         Json?
  created_date          DateTime                @default(now())
  modified_date         DateTime                @default(now())
  ReviewAssigneeAnswers ReviewAssigneeAnswers[]
  ReviewAssignee        ReviewAssignee[]
  MeetingType           MeetingType[]

  @@map("review")
}

model ReviewAssignee {
  id                    String                  @id @default(uuid())
  review                Review                  @relation(fields: [review_id], references: [id], onDelete: Cascade)
  review_id             String
  assigned_to           User                    @relation(fields: [assigned_to_id], references: [id], onDelete: Cascade)
  assigned_to_id        String
  created_date          DateTime                @default(now())
  modified_date         DateTime                @default(now())
  status                String?
  ReviewAssigneeAnswers ReviewAssigneeAnswers[]

  @@map("review_assignee")
}

model ReviewAssigneeAnswers {
  id                         Int                          @id @default(autoincrement())
  user                       User                         @relation(fields: [user_id], references: [id])
  user_id                    String
  review                     Review                       @relation(fields: [review_id], references: [id], onDelete: Cascade)
  review_id                  String
  review_assignee            ReviewAssignee               @relation(fields: [review_assignee_id], references: [id], onDelete: Cascade)
  review_assignee_id         String
  organization               UserOrganization?            @relation(fields: [organization_id], references: [id])
  organization_id            Int?
  created_date               DateTime                     @default(now())
  modified_date              DateTime                     @default(now())
  created_assignee_date      DateTime?
  delete_date                DateTime?
  ReviewAssigneeAnswerOption ReviewAssigneeAnswerOption[]

  ReviewAssignTemplate   ReviewAssignTemplate? @relation(fields: [reviewAssignTemplateId], references: [id])
  reviewAssignTemplateId String?

  @@map("review_assignee_answers")
}

model ReviewAssigneeAnswerOption {
  id            Int                   @id @default(autoincrement())
  review        ReviewAssigneeAnswers @relation(fields: [review_id], references: [id], onDelete: Cascade)
  review_id     Int
  question      ReviewQuestions       @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id   Int
  option        String?               @db.Text
  lowerLabel    String?
  higherLabel   String?
  created_date  DateTime              @default(now())
  modified_date DateTime              @default(now())
  delete_date   DateTime?

  @@map("review_assignee_answer_option")
}

model ReviewTemplate {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [user_id], references: [id])
  user_id          String
  form_title       String?
  form_description String?
  form_data        Json?
  status           Boolean
  default_template Boolean   @default(false)
  created_date     DateTime  @default(now())
  modified_date    DateTime  @default(now())
  delete_date      DateTime?

  @@map("review_template")
}

model UserOrganization {
  id                      Int                       @id @default(autoincrement())
  company_name            String                    @unique
  applaud_count           Int?                      @default(20)
  created_date            DateTime                  @default(now())
  modified_date           DateTime                  @default(now())
  User                    User[]
  Review                  Review[]
  UserOraganizationGroups UserOraganizationGroups[]

  UserApplaud           UserApplaud[]
  UserOraganizationTags UserOraganizationTags[]
  ReviewAssigneeAnswers ReviewAssigneeAnswers[]
  UserNotification      UserNotification[]
  Survey                Survey[]
  Goals                 Goals[]
  UserTeams             UserTeams[]
  Meetings              Meetings[]

  @@map("user_organization")
}

model PasswordReset {
  id            Int      @id @default(autoincrement())
  email         User     @relation("userEmail", fields: [email_id], references: [email])
  email_id      String   @unique
  created_by    User?    @relation("createdBy", fields: [created_by_id], references: [id])
  created_by_id String?
  token         String?
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())

  @@map("password_reset")
}

model UserApplaud {
  id              String            @id @default(uuid())
  user            User              @relation("userFeild", fields: [user_id], references: [id])
  user_id         String
  organization    UserOrganization? @relation(fields: [organization_id], references: [id])
  organization_id Int?
  comment         String?           @db.LongText
  category        Json?
  created         User              @relation("userCreated", fields: [created_by], references: [id])
  created_by      String
  created_date    DateTime          @default(now())
  modified_date   DateTime          @default(now())

  @@map("user_applaud")
}

model UserOraganizationGroups {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [user_id], references: [id])
  user_id         String
  role            Role             @relation(fields: [role_id], references: [id])
  role_id         Int
  organization    UserOrganization @relation(fields: [organization_id], references: [id])
  organization_id Int
  status          Boolean
  tags            Json?
  created_date    DateTime         @default(now())
  modified_date   DateTime         @default(now())

  @@map("user_organization_groups")
}

model UserOraganizationTags {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [user_id], references: [id])
  user_id         String
  tag_name        String
  organization    UserOrganization @relation(fields: [organization_id], references: [id])
  organization_id Int

  @@map("user_organization_tags")
}

model UserDetails {
  id      Int     @id @default(autoincrement())
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String? @unique()
  image   String?

  address1     String? @db.LongText
  address2     String? @db.LongText
  about        String? @db.LongText
  pin_code     String? @db.VarChar(20)
  mobile       String? @db.VarChar(15)
  slack_email  String? @db.VarChar(62)
  slack_id     String? @db.VarChar(25)
  notification Json?

  @@map("user_details")
}

model UserNotification {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String
  data            Json?
  read_at         DateTime?
  organization    UserOrganization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  organization_id Int
  created_date    DateTime?        @default(now())

  @@map("user_notification")
}

model Survey {
  id              String            @id @default(uuid())
  created         User              @relation(fields: [created_by], references: [id])
  created_by      String
  survey_name     String?
  organization    UserOrganization? @relation(fields: [organization_id], references: [id])
  organization_id Int?
  role            Role?             @relation(fields: [role_id], references: [id])
  role_id         Int?
  is_published    String?
  created_date    DateTime          @default(now())
  modified_date   DateTime          @default(now())
  SurveyQuestions SurveyQuestions[]
  SurveyAnswers   SurveyAnswers[]
  SurveyChannels  SurveyChannels[]

  @@map("survey")
}

model SurveyQuestions {
  id                   Int                    @id @default(autoincrement())
  survey               Survey                 @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  survey_id            String
  questionText         String
  type                 String
  open                 Boolean
  created_date         DateTime               @default(now())
  modified_date        DateTime               @default(now())
  SurveyQuestionOption SurveyQuestionOption[]
  SurveyAnswerOption   SurveyAnswerOption[]

  @@map("survey_questions")
}

model SurveyQuestionOption {
  id            Int             @id @default(autoincrement())
  question      SurveyQuestions @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id   Int
  optionText    String?
  lowerLabel    String?
  higherLabel   String?
  created_date  DateTime        @default(now())
  modified_date DateTime        @default(now())

  @@map("survey_question_option")
}

model SurveyAnswers {
  id                  Int                  @id @default(autoincrement())
  user_id             String               @default(uuid())
  survey              Survey               @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  survey_id           String
  name                String?
  created_date        DateTime             @default(now())
  modified_date       DateTime             @default(now())
  created_survey_date DateTime?
  delete_date         DateTime?
  SurveyAnswerOption  SurveyAnswerOption[]

  @@map("survey_answers")
}

model SurveyAnswerOption {
  id            Int             @id @default(autoincrement())
  survey        SurveyAnswers   @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  survey_id     Int
  question      SurveyQuestions @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id   Int
  option        String?         @db.Text
  lowerLabel    String?
  higherLabel   String?
  created_date  DateTime        @default(now())
  modified_date DateTime        @default(now())
  delete_date   DateTime?

  @@map("survey_answer_option")
}

model SurveyChannels {
  id                Int                   @id @default(autoincrement())
  survey            Survey                @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  survey_id         String
  type              SurveyChannelTypeEnum
  url               String?               @default(uuid())
  isDefault         Boolean               @default(false)
  name              String?
  submission_count  Int
  status            Boolean
  created_date      DateTime              @default(now())
  modified_date     DateTime              @default(now())
  SurveyChannelUser SurveyChannelUser[]

  @@map("survey_channels")
}

model SurveyChannelUser {
  id            Int                         @id @default(autoincrement())
  channel       SurveyChannels              @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  channel_id    Int
  name          String
  status        SurveyChannelUserStatusEnum
  customer_url  String                      @unique @default(uuid())
  created_date  DateTime                    @default(now())
  modified_date DateTime                    @default(now())

  @@map("survey_channels_user")
}

model Goals {
  id               String            @id @default(uuid())
  created          User              @relation(fields: [created_by], references: [id])
  created_by       String
  goal_title       String            @db.VarChar(120)
  goal_description String            @db.LongText
  goal_type        GoalTypeEnum
  status           GoalStatusEnum
  progress         Int?
  frequency        GoalFrequencyEnum
  start_date       DateTime?         @default(now())
  end_date         DateTime?
  is_archived      Boolean           @default(false)
  organization     UserOrganization? @relation(fields: [organization_id], references: [id])
  organization_id  Int
  created_date     DateTime          @default(now())
  modified_date    DateTime          @default(now())
  GoalsTimeline    GoalsTimeline[]
  GoalAssignee     GoalAssignee[]
  MeetingType      MeetingType[]

  @@map("goals")
}

model GoalsTimeline {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [user_id], references: [id])
  user_id       String
  goals         Goals          @relation(fields: [goals_id], references: [id], onDelete: Cascade)
  goals_id      String
  status        GoalStatusEnum
  comment       String?
  created_date  DateTime       @default(now())
  modified_date DateTime       @default(now())

  @@map("goals_timeline")
}

model UserTeams {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [user_id], references: [id])
  user_id         String
  team_name       String            @db.VarChar(100)
  organization    UserOrganization? @relation(fields: [organization_id], references: [id])
  organization_id Int
  created_date    DateTime          @default(now())
  modified_date   DateTime          @default(now())
  UserTeamsGroups UserTeamsGroups[]

  @@map("user_teams")
}

model GoalAssignee {
  id            Int            @id @default(autoincrement())
  assignee      User           @relation(fields: [assignee_id], references: [id])
  assignee_id   String
  status        GoalStatusEnum
  goal          Goals          @relation(fields: [goal_id], references: [id], onDelete: Cascade)
  goal_id       String
  created_date  DateTime       @default(now())
  modified_date DateTime       @default(now())

  @@map("goal_assignee")
}

model UserTeamsGroups {
  id        Int       @id @default(autoincrement())
  member    User      @relation(fields: [member_id], references: [id])
  member_id String
  team      UserTeams @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id   Int
  role      Role      @relation(fields: [role_id], references: [id])
  role_id   Int
  isManager Boolean   @default(false)

  @@map("user_teams_groups")
}

model Meetings {
  id                  String                @id @default(uuid())
  created             User                  @relation(fields: [created_by], references: [id])
  created_by          String
  meeting_title       String                @db.VarChar(120)
  meeting_description String?               @db.LongText
  meeting_type        MeetingTypeEnum
  frequency           MeetingFrequencyEnum?
  meeting_at          DateTime
  organization        UserOrganization?     @relation(fields: [organization_id], references: [id])
  organization_id     Int
  created_date        DateTime              @default(now())
  modified_date       DateTime              @default(now())
  google_event_id     String?
  generated_by        MeetingGenerateEnum?
  MeetingAssignee     MeetingAssignee[]
  MeetingType         MeetingType[]

  @@map("meetings")
}

model MeetingAssignee {
  id            Int      @id @default(autoincrement())
  assignee      User     @relation(fields: [assignee_id], references: [id])
  assignee_id   String
  comment       String?  @db.LongText
  meeting       Meetings @relation(fields: [meeting_id], references: [id], onDelete: Cascade)
  meeting_id    String
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())

  @@map("meeting_assignee")
}

model MeetingType {
  id         Int      @id @default(autoincrement())
  goal       Goals?   @relation(fields: [goal_id], references: [id], onDelete: Cascade)
  goal_id    String?
  review     Review?  @relation(fields: [review_id], references: [id], onDelete: Cascade)
  review_id  String?
  meeting    Meetings @relation(fields: [meeting_id], references: [id], onDelete: Cascade)
  meeting_id String

  @@map("meeting_type")
}

enum RoleEnum {
  SuperAdmin
  Admin
  Manager
  Member
}

enum Frequency {
  once
  daily
  weekly
  monthly
}

enum ReviewType {
  feedback
  other
}

enum SurveyChannelTypeEnum {
  Email
  Link
}

enum SurveyChannelUserStatusEnum {
  Pending
  Opened
  Answered
}

enum GoalTypeEnum {
  Organization
  Individual
  Team
  Self
}

enum GoalStatusEnum {
  OnTrack
  Completed
  Delayed
  AtRisk
  Abandoned
}

enum GoalFrequencyEnum {
  daily
  monthly
  weekly
  halfyearly
}

enum MeetingFrequencyEnum {
  Once
  Weekly
  Monthly
}

enum MeetingTypeEnum {
  Goal
  Review
  Casual
}

enum MeetingGenerateEnum {
  System
  User
}
