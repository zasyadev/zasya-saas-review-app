// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique()
  password        String
  first_name      String?
  last_name       String?
  address         String?          @db.LongText
  pin_code        String?
  mobile          String?
  status          Int
  role            Role             @relation(fields: [role_id], references: [id])
  role_id         Int
  createdDate     DateTime?        @default(now())
  Groups          Groups[]
  GroupsEmployees GroupsEmployees?
  FormTable       FormTable[]
  taskBy          FormAssign? @relation("taskBy")
  taskTo          FormAssign? @relation("taskTo")
}

model Role {
  id            Int      @id @default(autoincrement())
  name          String
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())
  User          User[]
}

model Groups {
  id              Int               @id @default(autoincrement())
  name            String?
  category        String?
  status          Boolean
  user            User              @relation(fields: [user_id], references: [id])
  user_id         String
  created_date    DateTime          @default(now())
  modified_date   DateTime          @default(now())
  GroupsEmployees GroupsEmployees[]
}

model GroupsEmployees {
  id            Int      @id @default(autoincrement())
  group         Groups   @relation(fields: [group_id], references: [id])
  group_id      Int
  employee      User     @relation(fields: [employee_id], references: [id])
  employee_id   String   @unique
  is_manager    Boolean
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())
}

model FormTable {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String
  form_title    String?
  form_data     Json?
  status        Boolean
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())
  FormAssign    FormAssign[]
}

model FormAssign {
  id                Int         @id @default(autoincrement())
  assigned_by       User        @relation("taskBy",fields: [assigned_by_id], references: [id])
  assigned_by_id    String
  assigned_to       User        @relation("taskTo",fields: [assigned_to_id], references: [id])
  assigned_to_id    String
  form              FormTable   @relation(fields: [form_id], references: [id])
  form_id           Int
  status            Boolean
  created_date      DateTime    @default(now())
  modified_date     DateTime    @default(now())
}
