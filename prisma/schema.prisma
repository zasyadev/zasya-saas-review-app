// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(uuid())
  email                   String                    @unique() @db.VarChar(62)
  password                String?
  first_name              String?                   @db.VarChar(50)
  last_name               String?                   @db.VarChar(50)
  address                 String?                   @db.LongText
  pin_code                String?                   @db.VarChar(20)
  mobile                  String?                   @db.VarChar(15)
  status                  Int
  role                    Role                      @relation(fields: [role_id], references: [id])
  role_id                 Int
  organization            UserOrganization          @relation(fields: [organization_id], references: [id])
  organization_id         Int
  createdDate             DateTime?                 @default(now())
  modified_date           DateTime?                 @default(now())
  deleted_date            DateTime?
  Groups                  Groups[]
  GroupsEmployees         GroupsEmployees?
  ReviewAssignTemplate    ReviewAssignTemplate[]
  taskReviewBy            Review[]                  @relation("taskReviewBy")
  ReviewTemplate          ReviewTemplate[]
  ReviewAssigneeAnswers   ReviewAssigneeAnswers[]
  UserImage               UserImage?
  userEmail               PasswordReset?            @relation("userEmail")
  createdBy               PasswordReset[]           @relation("createdBy")
  userCreated             UserApplaud[]             @relation("userCreated")
  userFeild               UserApplaud[]             @relation("userFeild")
  ReviewAssignee          ReviewAssignee[]
  UserOraganizationGroups UserOraganizationGroups[]

  @@map("users")
}

model Role {
  id                      Int                       @id @default(autoincrement())
  name                    RoleEnum                  @default(Member)
  created_date            DateTime                  @default(now())
  modified_date           DateTime                  @default(now())
  User                    User[]
  Review                  Review[]
  UserOraganizationGroups UserOraganizationGroups[]

  @@map("users_role")
}

model Groups {
  id              Int               @id @default(autoincrement())
  name            String?
  category        String?
  status          Boolean
  user            User              @relation(fields: [user_id], references: [id])
  user_id         String
  created_date    DateTime          @default(now())
  modified_date   DateTime          @default(now())
  GroupsEmployees GroupsEmployees[]

  @@map("users_groups")
}

model GroupsEmployees {
  id            Int      @id @default(autoincrement())
  group         Groups   @relation(fields: [group_id], references: [id])
  group_id      Int
  employee      User     @relation(fields: [employee_id], references: [id])
  employee_id   String   @unique
  is_manager    Boolean
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())

  @@map("users_group_member")
}

model ReviewAssignTemplate {
  id                    String                  @id @default(uuid())
  user                  User                    @relation(fields: [user_id], references: [id])
  user_id               String
  form_title            String?
  form_description      String?
  form_data             Json?
  status                Boolean
  created_date          DateTime                @default(now())
  modified_date         DateTime                @default(now())
  questions             ReviewQuestions[]       @relation("questions")
  Review                Review[]
  ReviewAssigneeAnswers ReviewAssigneeAnswers[]

  @@map("review_assign_template")
}

model ReviewQuestions {
  id                         Int                          @id @default(autoincrement())
  form                       ReviewAssignTemplate         @relation("questions", fields: [form_id], references: [id], onDelete: Cascade)
  form_id                    String
  questionText               String
  type                       String
  open                       Boolean
  created_date               DateTime                     @default(now())
  modified_date              DateTime                     @default(now())
  options                    ReviewQuestionOption[]       @relation("options")
  ReviewAssigneeAnswerOption ReviewAssigneeAnswerOption[]

  @@map("review_questions")
}

model ReviewQuestionOption {
  id            Int             @id @default(autoincrement())
  question      ReviewQuestions @relation("options", fields: [question_id], references: [id], onDelete: Cascade)
  question_id   Int
  optionText    String?
  lowerLabel    String?
  higherLabel   String?
  created_date  DateTime        @default(now())
  modified_date DateTime        @default(now())

  @@map("review_question_option")
}

model Review {
  id                    String                  @id @default(uuid())
  created               User                    @relation("taskReviewBy", fields: [created_by], references: [id])
  created_by            String
  review_name           String
  form                  ReviewAssignTemplate    @relation(fields: [form_id], references: [id], onDelete: Cascade)
  form_id               String
  status                String
  frequency             Frequency               @default(once)
  review_type           ReviewType              @default(other)
  organization          UserOrganization?       @relation(fields: [organization_id], references: [id])
  organization_id       Int?
  role                  Role?                   @relation(fields: [role_id], references: [id])
  role_id               Int?
  parent_id             String?
  frequency_status      Boolean                 @default(false)
  is_published          String?
  created_date          DateTime                @default(now())
  modified_date         DateTime                @default(now())
  ReviewAssigneeAnswers ReviewAssigneeAnswers[]
  ReviewAssignee        ReviewAssignee[]

  @@map("review")
}

model ReviewAssignee {
  id                    String                  @id @default(uuid())
  review                Review                  @relation(fields: [review_id], references: [id], onDelete: Cascade)
  review_id             String
  assigned_to           User                    @relation(fields: [assigned_to_id], references: [id], onDelete: Cascade)
  assigned_to_id        String
  created_date          DateTime                @default(now())
  modified_date         DateTime                @default(now())
  status                String?
  ReviewAssigneeAnswers ReviewAssigneeAnswers[]

  @@map("review_assignee")
}

model ReviewAssigneeAnswers {
  id                         Int                          @id @default(autoincrement())
  user                       User                         @relation(fields: [user_id], references: [id])
  user_id                    String
  review                     Review                       @relation(fields: [review_id], references: [id], onDelete: Cascade)
  review_id                  String
  review_assignee            ReviewAssignee               @relation(fields: [review_assignee_id], references: [id], onDelete: Cascade)
  review_assignee_id         String
  created_date               DateTime                     @default(now())
  modified_date              DateTime                     @default(now())
  created_assignee_date      DateTime?
  delete_date                DateTime?
  ReviewAssigneeAnswerOption ReviewAssigneeAnswerOption[]

  ReviewAssignTemplate   ReviewAssignTemplate? @relation(fields: [reviewAssignTemplateId], references: [id])
  reviewAssignTemplateId String?
  @@map("review_assignee_answers")
}

model ReviewAssigneeAnswerOption {
  id            Int                   @id @default(autoincrement())
  review        ReviewAssigneeAnswers @relation(fields: [review_id], references: [id], onDelete: Cascade)
  review_id     Int
  question      ReviewQuestions       @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id   Int
  option        String?
  lowerLabel    String?
  higherLabel   String?
  created_date  DateTime              @default(now())
  modified_date DateTime              @default(now())
  delete_date   DateTime?

  @@map("review_assignee_answer_option")
}

model ReviewTemplate {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [user_id], references: [id])
  user_id          String
  form_title       String?
  form_description String?
  form_data        Json?
  status           Boolean
  created_date     DateTime  @default(now())
  modified_date    DateTime  @default(now())
  delete_date      DateTime?

  @@map("review_template")
}

model UserOrganization {
  id                      Int                       @id @default(autoincrement())
  company_name            String                    @unique
  created_date            DateTime                  @default(now())
  modified_date           DateTime                  @default(now())
  User                    User[]
  Review                  Review[]
  UserOraganizationGroups UserOraganizationGroups[]

  @@map("user_organization")
}

model UserImage {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String   @unique
  image         String?
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())

  @@map("user_image")
}

model PasswordReset {
  id            Int      @id @default(autoincrement())
  email         User     @relation("userEmail", fields: [email_id], references: [email])
  email_id      String   @unique
  created_by    User?     @relation("createdBy", fields: [created_by_id], references: [id])
  created_by_id String?   
  token         String?
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())

  @@map("password_reset")
}

model UserApplaud {
  id            String   @id @default(uuid())
  user          User     @relation("userFeild", fields: [user_id], references: [id])
  user_id       String
  comment       String?  @db.LongText
  created       User     @relation("userCreated", fields: [created_by], references: [id])
  created_by    String
  created_date  DateTime @default(now())
  modified_date DateTime @default(now())

  @@map("user_applaud")
}

model UserOraganizationGroups {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [user_id], references: [id])
  user_id         String
  role            Role             @relation(fields: [role_id], references: [id])
  role_id         Int
  organization    UserOrganization @relation(fields: [organization_id], references: [id])
  organization_id Int
  status          Boolean
  tags            Json?
  created_date    DateTime         @default(now())
  modified_date   DateTime         @default(now())

  @@map("user_organization_groups")
}

enum RoleEnum {
  SuperAdmin
  Admin
  Manager
  Member
}

enum Frequency {
  once
  daily
  weekly
  monthly
}

enum ReviewType {
  feedback
  other
}
